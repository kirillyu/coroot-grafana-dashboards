{
  "__inputs": [
    {
      "name": "DS_VICTORIA-P01-PRODUCTION",
      "label": "Victoria-p01-production",
      "description": "",
      "type": "datasource",
      "pluginId": "prometheus",
      "pluginName": "Prometheus"
    }
  ],
  "__elements": {},
  "__requires": [
    {
      "type": "grafana",
      "id": "grafana",
      "name": "Grafana",
      "version": "11.4.0"
    },
    {
      "type": "panel",
      "id": "logs",
      "name": "Logs",
      "version": ""
    },
    {
      "type": "panel",
      "id": "nodeGraph",
      "name": "Node Graph",
      "version": ""
    },
    {
      "type": "datasource",
      "id": "prometheus",
      "name": "Prometheus",
      "version": "1.0.0"
    },
    {
      "type": "panel",
      "id": "table",
      "name": "Table",
      "version": ""
    },
    {
      "type": "panel",
      "id": "text",
      "name": "Text",
      "version": ""
    },
    {
      "type": "panel",
      "id": "timeseries",
      "name": "Time series",
      "version": ""
    }
  ],
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": {
          "type": "grafana",
          "uid": "-- Grafana --"
        },
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "fiscalYearStartMonth": 0,
  "graphTooltip": 0,
  "id": null,
  "links": [],
  "panels": [
    {
      "gridPos": {
        "h": 5,
        "w": 24,
        "x": 0,
        "y": 0
      },
      "id": 14,
      "options": {
        "code": {
          "language": "plaintext",
          "showLineNumbers": false,
          "showMiniMap": false
        },
        "content": "# Title\n\n1. Добавить информацию по инстансам network\n2. для cm не работает фильтр по неймспейсу\n4. добавить дропы контейнеров вне куба?\n5. надо подумать по system.slice и как их декомпозировать на графе\n5. делаем topk\n6. сделать проблемы в виде фильтра",
        "mode": "markdown"
      },
      "pluginVersion": "11.4.0",
      "title": "Panel Title",
      "type": "text"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 5
      },
      "id": 26,
      "panels": [],
      "title": "Overall",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "thresholds"
          },
          "custom": {
            "align": "auto",
            "cellOptions": {
              "type": "auto"
            },
            "inspect": false
          },
          "fieldMinMax": true,
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": [
          {
            "matcher": {
              "id": "byName",
              "options": "container_id"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 388
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "namespace"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 172
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "service"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 132
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "application_type"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 147
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Errors http %"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 125
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "match": "null+nan",
                      "result": {
                        "color": "green",
                        "index": 0,
                        "text": "0"
                      }
                    },
                    "type": "special"
                  }
                ]
              },
              {
                "id": "unit",
                "value": "percentunit"
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "lcd",
                  "type": "gauge",
                  "valueDisplayMode": "color"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 0.1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Response time 95%%"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 182
              },
              {
                "id": "unit",
                "value": "s"
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "percentage",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 10
                    },
                    {
                      "color": "red",
                      "value": 35
                    }
                  ]
                }
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "match": "null+nan",
                      "result": {
                        "color": "#8a848480",
                        "index": 0,
                        "text": "No HTTP calls"
                      }
                    },
                    "type": "special"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Restarts"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 136
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Throttling CPUs"
            },
            "properties": [
              {
                "id": "custom.width",
                "value": 154
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 0.01
                    },
                    {
                      "color": "red",
                      "value": 1
                    }
                  ]
                }
              },
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "match": "null+nan",
                      "result": {
                        "index": 0,
                        "text": "0"
                      }
                    },
                    "type": "special"
                  }
                ]
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Memory OOM"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "match": "null+nan",
                      "result": {
                        "color": "green",
                        "index": 0,
                        "text": "0"
                      }
                    },
                    "type": "special"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "red",
                      "value": 1
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Disk latency"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              },
              {
                "id": "mappings",
                "value": []
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 0.01
                    },
                    {
                      "color": "red",
                      "value": 0.1
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Network RTT"
            },
            "properties": [
              {
                "id": "unit",
                "value": "s"
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 0.01
                    },
                    {
                      "color": "red",
                      "value": 0.1
                    }
                  ]
                }
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Retransmits"
            },
            "properties": [
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              },
              {
                "id": "thresholds",
                "value": {
                  "mode": "absolute",
                  "steps": [
                    {
                      "color": "green",
                      "value": null
                    },
                    {
                      "color": "#EAB839",
                      "value": 10
                    },
                    {
                      "color": "red",
                      "value": 150
                    }
                  ]
                }
              }
            ]
          },
          {
            "matcher": {
              "id": "byName",
              "options": "Errors in logs %"
            },
            "properties": [
              {
                "id": "mappings",
                "value": [
                  {
                    "options": {
                      "match": "null+nan",
                      "result": {
                        "color": "#80808087",
                        "index": 0,
                        "text": "NO LOGS FOUND"
                      }
                    },
                    "type": "special"
                  }
                ]
              },
              {
                "id": "custom.cellOptions",
                "value": {
                  "mode": "basic",
                  "type": "color-background"
                }
              },
              {
                "id": "unit",
                "value": "percentunit"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 17,
        "w": 24,
        "x": 0,
        "y": 6
      },
      "id": 1,
      "options": {
        "cellHeight": "sm",
        "footer": {
          "countRows": false,
          "fields": "",
          "reducer": [
            "sum"
          ],
          "show": false
        },
        "frameIndex": 0,
        "showHeader": true,
        "sortBy": [
          {
            "desc": true,
            "displayName": "Response time 95%%"
          }
        ]
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "group by (container_id,namespace,service) (label_replace(label_replace(label_set(container_restarts_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"},\"namespace\",\"system.slice\"),\"namespace\",\"$1\",\"container_id\",\"\\\\/.+?\\\\/(.+?)\\\\/.*\"),\"service\",\"$1\",\"container_id\",\".*\\\\/(.+?)$\"))\n#group by (container_id,application_type) (container_application_type{container_id=~\".+?calico-node$\"})",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "Naming"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "group by (container_id,application_type) (container_application_type{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})\n#group by (container_id,application_type) (container_application_type{container_id=~\".+?calico-node$\"})",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "Type"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "#range_sum(increase(sum by (container_id) (container_http_requests_total{ status!=\"200\",container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])/(range_sum(increase(sum by (container_id) (container_http_requests_total{status!=\"200\",container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])+range_sum(increase(sum by (container_id) (container_http_requests_total{ status=\"200\",container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range]) ) \nWITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      sum by (container_id, actual_destination) (rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status!~\"2..\"})[1m0s])/ on(container_id, actual_destination) sum by (container_id, actual_destination) (rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\"})[1m0s]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n     sum by (container_id, actual_destination) ( rate(container_http_requests_total{container_id=~\"\\\\/system.*\", status!~\"2..\"})[1m0s])/ on(container_id, actual_destination) sum by (container_id, actual_destination) (rate(container_http_requests_total{container_id=~\"\\\\/system.*\"})[1m0s]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            #coroot:http_requests{source_namespace=~\"metricsedge\", source_service=~\".*\", target_namespace!~\"(monitoring|system\\\\.slice)\"} or on (source_pod,actual_destination) я думаю мы не смотрим вокруг выбранного нса\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\nmax by (container_id) ((metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query) * on(target_pod) group_left(container_id)\ngroup by (target_pod,container_id) (\n    label_replace(\n        container_restarts_total{container_id=~\"\\\\/k.*\"},\n        \"target_pod\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or on (target_pod,container_id) label_replace(\n        container_restarts_total{container_id=~\"\\\\/system.*\"},\n        \"target_pod\", \"$1\", \"container_id\", \"\\\\/sys.+?\\\\/(.+?)$\"\n    )\n    ))",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "errors",
          "range": true,
          "refId": "Errors"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "#max_over_time(histogram_quantile(0.95, sum by (le, container_id)(    rate( container_http_requests_duration_seconds_total_bucket{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__interval]))    )[$__range])\n\nWITH (\n  metric = max by (source, actual_destination) (\n    label_replace(\n      max_over_time(histogram_quantile(0.95, sum by (le, container_id,actual_destination)(\n    rate( container_http_requests_duration_seconds_total_bucket[$__interval]))\n    )[$__range]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n     max_over_time(histogram_quantile(0.95, sum by (le, container_id,actual_destination)(\n    rate( container_http_requests_duration_seconds_total_bucket[$__interval]))\n    )[$__range]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            #coroot:http_requests{source_namespace=~\"metricsedge\", source_service=~\".*\", target_namespace!~\"(monitoring|system\\\\.slice)\"} or on (source_pod,actual_destination) я думаю мы не смотрим вокруг выбранного нса\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\nmax by (container_id) ((metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query) * on(target_pod) group_left(container_id)\ngroup by (target_pod,container_id) (\n    label_replace(\n        container_restarts_total{container_id=~\"\\\\/k.*\"},\n        \"target_pod\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or on (target_pod,container_id) label_replace(\n        container_restarts_total{container_id=~\"\\\\/system.*\"},\n        \"target_pod\", \"$1\", \"container_id\", \"\\\\/sys.+?\\\\/(.+?)$\"\n    )\n    ))",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "response time 95%%",
          "range": true,
          "refId": "Latency"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_sum(increase(sum by (container_id) (container_restarts_total{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "errors",
          "range": true,
          "refId": "Restart"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_max(rate(max by (container_id) (container_resources_cpu_throttled_seconds_total{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "errors",
          "range": true,
          "refId": "Throttle"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_sum(increase(sum by (container_id) (container_oom_kills_total{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "oom",
          "range": true,
          "refId": "Memory OOM"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_max(increase(max by (container_id) (container_resources_disk_delay_seconds_total{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "oom",
          "range": true,
          "refId": "DiskDelay"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_max(increase(max by (container_id) (container_net_latency_seconds{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "oom",
          "range": true,
          "refId": "NetDelay"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_max(increase(max by (container_id) (container_net_tcp_retransmits_total{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "oom",
          "range": true,
          "refId": "NetRetrans"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "range_sum(increase(sum by (container_id) (container_log_messages_total{level=\"error\", container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])/range_sum(increase(sum by (container_id) (container_log_messages_total{ container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?$service$\"})[1m])[$__range])",
          "format": "table",
          "hide": false,
          "instant": false,
          "legendFormat": "oom",
          "range": true,
          "refId": "LogErrors"
        }
      ],
      "title": "Overview",
      "transformations": [
        {
          "id": "groupBy",
          "options": {
            "fields": {
              "Value #A": {
                "aggregations": [],
                "operation": "groupby"
              },
              "Value #B": {
                "aggregations": [
                  "last"
                ],
                "operation": "aggregate"
              },
              "Value #C": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #DiskDelay": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #Errors": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #Latency": {
                "aggregations": [
                  "last"
                ],
                "operation": "aggregate"
              },
              "Value #LogErrors": {
                "aggregations": [
                  "last"
                ],
                "operation": "aggregate"
              },
              "Value #Memory OOM": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #Naming": {
                "aggregations": []
              },
              "Value #NetDelay": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #NetRetrans": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #Restart": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #Throttle": {
                "aggregations": [
                  "max"
                ],
                "operation": "aggregate"
              },
              "Value #Type": {
                "aggregations": []
              },
              "application_type": {
                "aggregations": [],
                "operation": "groupby"
              },
              "container_id": {
                "aggregations": [],
                "operation": "groupby"
              },
              "namespace": {
                "aggregations": [],
                "operation": "groupby"
              },
              "service": {
                "aggregations": [],
                "operation": "groupby"
              }
            }
          }
        },
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "indexByName": {
              "Value #Errors (max)": 4,
              "Value #Latency (last)": 5,
              "application_type": 3,
              "container_id": 0,
              "namespace": 1,
              "service": 2
            },
            "renameByName": {
              "Value #DiskDelay (max)": "Disk latency",
              "Value #Errors (max)": "Errors http %",
              "Value #Latency (last)": "Response time 95%%",
              "Value #LogErrors (last)": "Errors in logs %",
              "Value #Memory OOM (max)": "Memory OOM",
              "Value #NetDelay (max)": "Network RTT",
              "Value #NetRetrans (max)": "Retransmits",
              "Value #Restart (max)": "Restarts",
              "Value #Throttle (max)": "Throttling CPUs",
              "application_type": ""
            }
          }
        }
      ],
      "type": "table"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 23
      },
      "id": 7,
      "panels": [],
      "title": "Network",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "description": "График покажет активные соединения относительно объекта или существующие в рамках периода выбранного на дашборде. \nОн находит любые исходящие соединения объекта. Внутри показывает объем дропов пакетов в абсолютных величинах\nОн находит входящие соединения только при условии что они были от объектов которые мониторятся корутом.",
      "gridPos": {
        "h": 49,
        "w": 7,
        "x": 0,
        "y": 24
      },
      "id": 17,
      "options": {
        "edges": {
          "mainStatUnit": "pps",
          "secondaryStatUnit": "short"
        },
        "nodes": {
          "arcs": [
            {
              "color": "#E02F44",
              "field": "arc__errors"
            },
            {
              "color": "#E02F44",
              "field": "arc__tcp_errors"
            }
          ],
          "mainStatUnit": "drops",
          "secondaryStatUnit": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "WITH( \n    base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\") )\n\nalias(base_query * on(id) group_right(title,subtitle,__name__) range_sum(\n    sum by (id) (\n      label_copy(\n        increase(\n          container_network_advance_tcp_stats_total{tcp_state=~\".*drop\"}[1m]\n        )\n        ,\"pod\",\"id\"\n      )\n    ) \n  [$__range]\n) or (base_query - 1),\"nodes\")",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Nodes"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "\n\nalias(\n    group by(source,target,id)(\n        label_join(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n                \"source_pod\",\"source\",\"target_pod\",\"target\"\n            ),\n            \"id\",\"+\",\"source\",\"target\"\n        )\n    )\n,\"edges\")\n",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Edges old"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "#label_set(\nrange_sum(\n    sum by (id) (\n      label_copy(\n        increase(\n          container_network_advance_tcp_stats_total{tcp_state=~\".*drop\"}[1m]\n        )\n        ,\"pod\",\"id\"\n      )\n    ) \n  [$__range]\n)\n#,\"color\",\"red\",\"highlighted\",\"true\")",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "\nWITH (\n  metric = max by (source, actual_destination,target,id) (\n        label_replace(\n          rate(container_net_tcp_retransmits_total{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n        ) or \n        label_replace(\n          rate(container_net_tcp_retransmits_total{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n            \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n        )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service,target,id)(\n    label_join(\n      label_replace(\n          label_copy(\n              coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n              or on (source_pod,actual_destination)\n              coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n              \"source_pod\",\"source\",\"target_pod\",\"target\"\n          ),\n          \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n      ),\n      \"id\",\"+\",\"source\",\"target\"\n    )\n  )\n)\n\nalias(label_set(\n  max by (id,source,target) (\n   label_join(\n      label_copy(\n          (metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service,target,id) edges_query) >0\n      ,\"target_pod\",\"target\")\n  ,\"id\",\"+\",\"source\",\"target\"))\n,\"color\",\"red\",\"highlighted\",\"true\")\nor on (id,source,target) max by (id,source,target,color,highlighted) (\n  label_set(edges_query,\"color\",\"\",\"highlighted\",\"false\") * 0\n),\"edges\")",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Edges"
        }
      ],
      "title": "Все соединения выбранного объекта (дропы только у кубовых сущностей)",
      "transformations": [
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "mainStat",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Nodes"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "arc__tcp_errors",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Nodes"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "mainstat",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Edges"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "partitionByValues",
          "options": {
            "fields": [
              "__name__"
            ],
            "keepFields": false,
            "naming": {
              "asLabels": false
            }
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "nodes id",
                "nodes subtitle",
                "nodes title",
                "nodes Value #Nodes",
                "nodes mainStat",
                "nodes arc__tcp_errors",
                "edges id",
                "edges subtitle",
                "edges title",
                "edges color",
                "edges source",
                "edges target",
                "edges Value #Edges",
                "edges mainstat"
              ]
            }
          }
        }
      ],
      "type": "nodeGraph"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green",
                "value": null
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 24
      },
      "id": 8,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"destination_ip\",\"$1\",\"actual_destination\",\"(.+?):.*\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Network round-trip time, seconds (показаны $top самых долгих откликов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 31
      },
      "id": 9,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "\n\nWITH (\n  metric = max by (source, destination) (\n      label_replace(\n        increase(container_net_tcp_connection_time_seconds_total{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      ) or \n      label_replace(\n        increase(container_net_tcp_connection_time_seconds_total{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n      )\n  ), \n  edges_query =  group by(source,destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "union(\n  max by (id, title, subtitle) (\n  label_copy(\n  # Обогащённая группа\n  (\n    group by (actual_destination, instance, container_id, target, source, namespace, service) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    )\n    * on(target) group_left(namespace, service) (\n      group by (target, namespace, service) (\n        label_copy(\n        label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info[$__range]),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ), \"namespace\", \" \", \"namespace\",\"service\"), \"listen_addr\", \"service\")\n      )\n    )\n  ) \n  # Базовая группа для отсутствующих namespace и service\n  or on(target)\n  (label_copy(\n    group by (actual_destination, instance, container_id, target, source) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    ), \"target\",\"namespace\",\"actual_destination\",\"service\")\n  ),  \"target\", \"id\", \"namespace\", \"subtitle\", \"service\", \"title\"\n  )\n),\n    #Сам выбранный сервис\n    group by (title, id, subtitle) (\n      label_replace(\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n          ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n        ),\n        \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n      ),\n      \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\")\n    ),\n    #клиенты слева\n    group by (id,title,subtitle) (\n    group by (target) (\n      label_replace(\n        label_replace(\n          label_replace(\n            max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n            ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ),\n        \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n      )\n    ) * on (target) group_left(id,title,subtitle)\n    group by (subtitle, title, target, id) (\n    label_copy(\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              label_replace(\n                max_over_time(container_net_tcp_active_connections[$__range]),\n                \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n              ),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),     \n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"id\", \"$1\", \"instance\", \"(.+?):.*\"\n        ), #пока не верно тут нужен listen_addr\n        \"subtitle\", \" \", \"namespace\", \"service\"\n      ),\n      \"instance\",\"title\"\n    ) #пока не верно тут нужен listen_addr\n  )\n)\n)\n",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "TCP connection latency, seconds (показаны $top самых долгих откликов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 38
      },
      "id": 10,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination) (\n      label_replace(\n        (container_net_tcp_active_connections{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n         \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      ) or \n      label_replace(\n        (container_net_tcp_active_connections{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n           \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n      )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "union(\n  max by (id, title, subtitle) (\n  label_copy(\n  # Обогащённая группа\n  (\n    group by (actual_destination, instance, container_id, target, source, namespace, service) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    )\n    * on(target) group_left(namespace, service) (\n      group by (target, namespace, service) (\n        label_copy(\n        label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info[$__range]),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ), \"namespace\", \" \", \"namespace\",\"service\"), \"listen_addr\", \"service\")\n      )\n    )\n  ) \n  # Базовая группа для отсутствующих namespace и service\n  or on(target)\n  (label_copy(\n    group by (actual_destination, instance, container_id, target, source) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    ), \"target\",\"namespace\",\"actual_destination\",\"service\")\n  ),  \"target\", \"id\", \"namespace\", \"subtitle\", \"service\", \"title\"\n  )\n),\n    #Сам выбранный сервис\n    group by (title, id, subtitle) (\n      label_replace(\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n          ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n        ),\n        \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n      ),\n      \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\")\n    ),\n    #клиенты слева\n    group by (id,title,subtitle) (\n    group by (target) (\n      label_replace(\n        label_replace(\n          label_replace(\n            max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n            ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ),\n        \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n      )\n    ) * on (target) group_left(id,title,subtitle)\n    group by (subtitle, title, target, id) (\n    label_copy(\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              label_replace(\n                max_over_time(container_net_tcp_active_connections[$__range]),\n                \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n              ),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),     \n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"id\", \"$1\", \"instance\", \"(.+?):.*\"\n        ), #пока не верно тут нужен listen_addr\n        \"subtitle\", \" \", \"namespace\", \"service\"\n      ),\n      \"instance\",\"title\"\n    ) #пока не верно тут нужен listen_addr\n  )\n)\n)\n",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "Active TCP connections (показаны $top количественных сессий)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 45
      },
      "id": 11,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination) (\n      label_replace(\n        rate(container_net_tcp_active_connections{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n         \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      ) or \n      label_replace(\n        rate(container_net_tcp_active_connections{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n           \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n      )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "union(\n  max by (id, title, subtitle) (\n  label_copy(\n  # Обогащённая группа\n  (\n    group by (actual_destination, instance, container_id, target, source, namespace, service) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    )\n    * on(target) group_left(namespace, service) (\n      group by (target, namespace, service) (\n        label_copy(\n        label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info[$__range]),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ), \"namespace\", \" \", \"namespace\",\"service\"), \"listen_addr\", \"service\")\n      )\n    )\n  ) \n  # Базовая группа для отсутствующих namespace и service\n  or on(target)\n  (label_copy(\n    group by (actual_destination, instance, container_id, target, source) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    ), \"target\",\"namespace\",\"actual_destination\",\"service\")\n  ),  \"target\", \"id\", \"namespace\", \"subtitle\", \"service\", \"title\"\n  )\n),\n    #Сам выбранный сервис\n    group by (title, id, subtitle) (\n      label_replace(\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n          ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n        ),\n        \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n      ),\n      \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\")\n    ),\n    #клиенты слева\n    group by (id,title,subtitle) (\n    group by (target) (\n      label_replace(\n        label_replace(\n          label_replace(\n            max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n            ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ),\n        \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n      )\n    ) * on (target) group_left(id,title,subtitle)\n    group by (subtitle, title, target, id) (\n    label_copy(\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              label_replace(\n                max_over_time(container_net_tcp_active_connections[$__range]),\n                \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n              ),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),     \n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"id\", \"$1\", \"instance\", \"(.+?):.*\"\n        ), #пока не верно тут нужен listen_addr\n        \"subtitle\", \" \", \"namespace\", \"service\"\n      ),\n      \"instance\",\"title\"\n    ) #пока не верно тут нужен listen_addr\n  )\n)\n)\n",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "TCP connection attempts, per second (не уверен что правильно считаю) (показаны $top самых частотных сессий)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "binBps"
        },
        "overrides": [
          {
            "matcher": {
              "id": "byFrameRefID",
              "options": "C"
            },
            "properties": [
              {
                "id": "custom.transform",
                "value": "negative-Y"
              }
            ]
          }
        ]
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 52
      },
      "id": 12,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "\n\n\nWITH (\n  metric = max by (source, actual_destination) (\n      label_replace(\n        increase(container_net_tcp_bytes_received_total{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      ) or \n      label_replace(\n        increase(container_net_tcp_bytes_received_total{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n      )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "recv: {{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "\n\n\nWITH (\n  metric = max by (source, actual_destination) (\n      label_replace(\n        increase(container_net_tcp_bytes_sent_total{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      ) or \n      label_replace(\n        increase(container_net_tcp_bytes_sent_total{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n          \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n      )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "sent: {{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Traffic outboud/inboud bytes/sec (показаны $top самых объемных взаимодействий)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 59
      },
      "id": 13,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "\nWITH (\n  metric = max by (source, actual_destination) (\n      label_replace(\n        rate(container_net_tcp_retransmits_total{container_id=~\"\\\\/k.*\"}[$__rate_interval]),\n         \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      ) or \n      label_replace(\n        rate(container_net_tcp_retransmits_total{container_id=~\"\\\\/system.slice.*\"}[$__rate_interval]),\n           \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n      )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))\n",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "union(\n  max by (id, title, subtitle) (\n  label_copy(\n  # Обогащённая группа\n  (\n    group by (actual_destination, instance, container_id, target, source, namespace, service) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    )\n    * on(target) group_left(namespace, service) (\n      group by (target, namespace, service) (\n        label_copy(\n        label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info[$__range]),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ), \"namespace\", \" \", \"namespace\",\"service\"), \"listen_addr\", \"service\")\n      )\n    )\n  ) \n  # Базовая группа для отсутствующих namespace и service\n  or on(target)\n  (label_copy(\n    group by (actual_destination, instance, container_id, target, source) (\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_active_connections{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    ), \"target\",\"namespace\",\"actual_destination\",\"service\")\n  ),  \"target\", \"id\", \"namespace\", \"subtitle\", \"service\", \"title\"\n  )\n),\n    #Сам выбранный сервис\n    group by (title, id, subtitle) (\n      label_replace(\n      label_replace(\n        label_replace(\n          max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n          ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n        ),\n        \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n      ),\n      \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\")\n    ),\n    #клиенты слева\n    group by (id,title,subtitle) (\n    group by (target) (\n      label_replace(\n        label_replace(\n          label_replace(\n            max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n            ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ),\n        \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n      )\n    ) * on (target) group_left(id,title,subtitle)\n    group by (subtitle, title, target, id) (\n    label_copy(\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              label_replace(\n                max_over_time(container_net_tcp_active_connections[$__range]),\n                \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n              ),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),     \n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"id\", \"$1\", \"instance\", \"(.+?):.*\"\n        ), #пока не верно тут нужен listen_addr\n        \"subtitle\", \" \", \"namespace\", \"service\"\n      ),\n      \"instance\",\"title\"\n    ) #пока не верно тут нужен listen_addr\n  )\n)\n)\n",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "TCP retransmissions, segments/second (показаны $top самых частотных взаимодействий)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "none"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 66
      },
      "id": 15,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "WITH( \n    base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\") )\n\ntopk_max($top,alias(base_query * on(id) group_right(title,subtitle,__name__) \n    sum by (id) (\n      label_copy(\n        increase(\n          container_network_advance_tcp_stats_total{tcp_state=~\".*drop\"}[1m]\n        )\n        ,\"pod\",\"id\"\n      )\n    ) \n  ,\"nodes\"))",
          "format": "time_series",
          "hide": false,
          "instant": false,
          "legendFormat": "{{id}} {{title}} {{subtitle}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "sum by (id) \n    (\n      sum by (pod) (\n        increase(\n          container_network_advance_tcp_stats_total{tcp_state=~\".*drop\"}[1m]\n        )\n      ) * on(pod) group_left(id) \n      group by (id,pod) (\n      label_replace(\n          label_replace(\n            container_net_tcp_listen_info{container_id=~\"\\\\/k8s.*\"}\n            ,\"pod\",\"$1\",\"container_id\",\"\\\\/k8s\\\\/.*\\\\/(.+?)\\\\/.*\"\n          ),\n          \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        )\n      )\n    )",
          "hide": true,
          "instant": false,
          "legendFormat": "{{id}}",
          "range": true,
          "refId": "B"
        }
      ],
      "title": "TCP drops, packets/second (если 0 то может не быть метрик) (показаны $top количественных узлов)",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 73
      },
      "id": 6,
      "panels": [],
      "title": "Прикладной слой (HTTP/Databases/Kafka/Cache)",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "description": "График покажет активные соединения относительно объекта или существующие в рамках периода выбранного на дашборде. \nОн находит любые исходящие соединения объекта. Внутри показывает объем дропов пакетов в абсолютных величинах\nОн находит входящие соединения только при условии что они были от объектов которые мониторятся корутом.",
      "gridPos": {
        "h": 35,
        "w": 7,
        "x": 0,
        "y": 74
      },
      "id": 16,
      "options": {
        "edges": {
          "mainStatUnit": "reqps",
          "secondaryStatUnit": "reqpm"
        },
        "nodes": {
          "arcs": [],
          "mainStatUnit": "s",
          "secondaryStatUnit": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "WITH( \n    base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\") )\n\n\nalias(\n    base_query * on(id) group_right(title,subtitle,__name__) \n    range_max(\n        max by (id) (\n            label_copy(\n                max by (container_id,actual_destination) (\n                    rate(container_http_requests_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})\n                ) * on(container_id,actual_destination) group_left(target_pod) group by (container_id,actual_destination,target_pod) (coroot:http_requests),\n                \"target_pod\",\"id\"\n            ) or\n            label_copy(\n                max by (container_id,actual_destination) (\n                    rate(container_http_requests_duration_seconds_total_sum{container_id=~\"\\\\/system.*\"})/rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/system.*\"})\n                )  * on(container_id,actual_destination) group_left(target_pod) group by (container_id,actual_destination,target_pod) (coroot:http_requests),\n                \"target_pod\",\"id\"\n            )\n        )\n    ) \n  [$__range]\n or (base_query - 1),\"nodes\")",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Nodes"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "alias(\n    group by(source,target,id)(\n        label_join(\n            label_copy(\n                coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"} \n                or\n                coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n                \"source_pod\",\"source\",\"target_pod\",\"target\"\n            ),\n            \"id\",\"+\",\"source\",\"target\"\n        )\n    )\n,\"edges\")",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Edges"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "#label_set( response time\n  alias(\n    range_max(\n      max by (id) (\n         max by (container_id) (\n              rate(container_http_requests_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})\n        )   * on(container_id) group_left(id) \n      group by (id,container_id) (\n        label_replace(\n          container_net_tcp_listen_info{container_id=~\"\\\\/k8s.*\"}\n          ,\"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        )\n      )\n      )\n      [$__range]\n    )\n    ,\"nodes\"\n  )\n#,\"color\",\"red\",\"highlighted\",\"true\")",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "\n#label_set( сделать надо норм сорс таргет для рейта чтобы отображался на стрелке rps\n  alias(\n    range_max(\n      label_join(\n        max by (source,target) (\n          max by (container_id,target) (\n              label_replace(\n                rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\"})\n                ,\"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n              )\n            ) * on(container_id) group_left(source) \n          group by (source,container_id) (\n            label_replace(\n              container_net_tcp_listen_info{container_id=~\"\\\\/k8s.*\"}\n              ,\"source\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n            )\n          )\n        )\n      ,\"id\",\"+\",\"source\",\"target\")\n      [$__range]\n    )\n    ,\"edges\"\n  )\n#,\"color\",\"red\",\"highlighted\",\"true\"",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "alias(union(\n  max by (id, title, subtitle) (\n  label_copy(\n  (\n    sum by (actual_destination, instance, container_id, target, source, namespace, service) (\n      label_replace(\n        label_replace(\n          max_over_time(rate(container_http_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    )\n    * on(target) group_left(namespace, service) (\n      group by (target, namespace, service) (\n        label_copy(\n        label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info[$__range]),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ), \"namespace\", \" \", \"namespace\",\"service\"), \"listen_addr\", \"service\")\n      ) or on(target) #для ипов 10.++\n      # \n      group by (target,namespace,service) (\n        label_copy(\n          group by (domain) (\n            max_over_time(container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range])\n          ) * on(domain) group_left(ip) \n          group by (domain,ip) (\n            label_copy(\n              max_over_time(ip_to_fqdn[$__range]),\"fqdn\",\"domain\"\n            )\n          ),\n          \"domain\",\"service\",\"ip\",\"target\", \"ip\",\"namespace\"\n        )\n      )\n    )\n  ) \n  or on(target)\n  (label_copy(\n    sum by (actual_destination, instance, container_id, target, source) (\n      label_replace(\n        label_replace(\n          max_over_time(rate(container_http_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})[$__range]),\n          \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n      )\n    ), \"target\",\"namespace\",\"actual_destination\",\"service\")\n  ),  \"target\", \"id\", \"namespace\", \"subtitle\", \"service\", \"title\"\n  )\n),\n    group by (title, id, subtitle) (\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__range])\n              ,\"subtitle\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n        \"title\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n        ),\n        \"subtitle\",\" \",\"subtitle\",\"id\"\n      ) or group by (title, id, subtitle) (\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n              max_over_time(container_net_tcp_listen_info{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__range])\n              ,\"subtitle\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),\n            \"id\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n        \"title\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n        ),\n        \"subtitle\",\" \",\"subtitle\",\"id\"\n      )\n      )\n    ),\n    #клиенты слева\n    sum by (id,title,subtitle) (\n    sum by (target) (\n      label_replace(\n        label_replace(\n          label_replace(\n            max_over_time(rate(container_http_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})[$__range])\n            ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n          ),\n          \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n        ),\n        \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n      )\n    ) * on (target) group_left(id,title,subtitle)\n    group by (subtitle, title, target, id) (\n    label_copy(\n      label_join(\n        label_replace(\n          label_replace(\n            label_replace(\n                  label_replace(\n                      max_over_time(container_http_requests_total[$__range]),\n                      \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n                  ),\n              \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n            ),     \n            \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n          ),\n          \"id\", \"$1\", \"instance\", \"(.+?):.*\"\n        ), \n        \"subtitle\", \" \", \"namespace\", \"service\"\n      ),\n      \"instance\",\"title\"\n    ) \n  )\n)\n), \"nodes\")",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "C"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "alias(union(\ngroup by (id, source, target,color,highlighted,thickness) (\n  max by (id, source, target,color,highlighted,thickness) (\n    label_join(\n      label_replace(\n        #сначала ошибочные\n        label_set(\n            label_replace(\n                max_over_time(rate(container_http_requests_total{status=~\"(4..|5..)\",container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})[$__range])\n                * on(instance) group_left(listen_addr) max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n                \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n            ),\n            \"color\",\"red\", \"highlighted\", \"true\", \"thickness\", \"15\"\n        #объединяем с подмножеством успешных\n        )  or on(target,listen_addr)\n        label_replace(\n            max_over_time(rate(container_http_requests_total{status!~\"(4..|5..)\",container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})[$__range])\n                * on(instance) group_left(listen_addr) max_over_time(container_net_tcp_listen_info{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}[$__range]),\n            \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n        ),\n        \"source\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n      ),\n      \"id\", \"+\", \"source\", \"target\"\n    )\n  )\n),\n# клиенты слева\nlabel_join(\n  group by (source, target) (\n        group by (target) (\n          label_replace(\n            label_replace(\n              label_replace(\n                max_over_time(rate(container_http_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"})[$__range])\n                ,\"subtitle\", \"$1\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"target\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n            ),\n          \"title\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\")\n        ) * on (target) group_left(subtitle, title, target, source)\n        group by (subtitle, title, target, source) (\n        label_copy(\n            label_join(\n                label_replace(\n                    label_replace(\n                        label_replace(\n                            union(\n                                label_replace(\n                                    max_over_time(rate(container_http_requests_total{status!~\"(4..|5..)\"})[$__range]),\n                                    \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n                                ),\n                                ##зачем?\n                                label_set(\n                                    label_replace(\n                                        max_over_time(rate(container_http_requests_total{status=~\"(4..|5..)\"})[$__range]),\n                                        \"target\", \"$1\", \"actual_destination\", \"(.+?):.*\"\n                                    ),\n                                    \"color\",\"red\"\n                                )\n                            ),\n                            \"namespace\", \"=$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n                        ),     \n                        \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n                    ),\n                    \"source\", \"$1\", \"instance\", \"(.+?):.*\"\n                ), #пока не верно тут нужен listen_addr\n                \"subtitle\", \" \", \"namespace\", \"service\"\n            ),\n            \"instance\",\"title\"\n        ) #пока не верно тут нужен listen_addr\n    )\n)\n,\"id\",\"+\",\"source\",\"target\")\n\n#Edges\n),\"edges\")",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "D"
        }
      ],
      "title": "Все соединения выбранного объекта (error%)",
      "transformations": [
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "mainStat",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Nodes"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "partitionByValues",
          "options": {
            "fields": [
              "__name__"
            ],
            "keepFields": false,
            "naming": {
              "asLabels": false
            }
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "nodes id",
                "nodes subtitle",
                "nodes title",
                "nodes Value #Nodes",
                "nodes mainStat",
                "edges id",
                "edges source",
                "edges target",
                "edges Value #Edges",
                "nodes arc__Response_Time"
              ]
            }
          }
        }
      ],
      "type": "nodeGraph"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 74
      },
      "id": 18,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination) (\n    label_replace(\n      rate(container_http_requests_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_http_requests_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "HTTP Response time (показаны $top самых высоких откликов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 81
      },
      "id": 19,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination) (\n    label_replace(\n      rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_http_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "HTTP Request per second (all codes) (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 88
      },
      "id": 20,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status=~\"2..\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status=~\"2..\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} (code:{{status}}) -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "HTTP Request per second (200-ые коды) (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 95
      },
      "id": 21,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status=~\"4..\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status=~\"4..\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} (code:{{status}}) -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "HTTP Request per second (400-ые коды) (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "semi-dark-red",
            "mode": "shades"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 102
      },
      "id": 22,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status=~\"5..\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_http_requests_total{container_id=~\"\\\\/k8s.*\", status=~\"5..\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:http_requests{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:http_requests{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} (code:{{status}}) -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "HTTP Request per second (500-ые коды) (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 109
      },
      "id": 30,
      "panels": [],
      "title": "Statefulls in progress",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${Datasource}"
      },
      "description": "График покажет активные соединения относительно объекта или существующие в рамках периода выбранного на дашборде. \nОн находит любые исходящие соединения объекта. Внутри показывает объем дропов пакетов в абсолютных величинах\nОн находит входящие соединения только при условии что они были от объектов которые мониторятся корутом.",
      "gridPos": {
        "h": 49,
        "w": 7,
        "x": 0,
        "y": 110
      },
      "id": 31,
      "options": {
        "edges": {
          "mainStatUnit": "pps",
          "secondaryStatUnit": "short"
        },
        "nodes": {
          "arcs": [
            {
              "color": "#E02F44",
              "field": "arc__errors"
            },
            {
              "color": "#E02F44",
              "field": "arc__tcp_errors"
            }
          ],
          "mainStatUnit": "drops",
          "secondaryStatUnit": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "WITH( \n    base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\") )\n\nalias(base_query * on(id) group_right(title,subtitle,__name__) range_sum(\n    sum by (id) (\n      label_copy(\n        increase(\n          container_network_advance_tcp_stats_total{tcp_state=~\".*drop\"}[1m]\n        )\n        ,\"pod\",\"id\"\n      )\n    ) \n  [$__range]\n) or (base_query - 1),\"nodes\")",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Nodes"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "\n\nalias(\n    group by(source,target,id)(\n        label_join(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n                \"source_pod\",\"source\",\"target_pod\",\"target\"\n            ),\n            \"id\",\"+\",\"source\",\"target\"\n        )\n    )\n,\"edges\")\n",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Edges old"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "#label_set(\nrange_sum(\n    sum by (id) (\n      label_copy(\n        increase(\n          container_network_advance_tcp_stats_total{tcp_state=~\".*drop\"}[1m]\n        )\n        ,\"pod\",\"id\"\n      )\n    ) \n  [$__range]\n)\n#,\"color\",\"red\",\"highlighted\",\"true\")",
          "format": "table",
          "hide": true,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "exemplar": false,
          "expr": "\nWITH (\n  metric_fail = max by (source, actual_destination,target,id) (\n        label_replace(\n          rate(container_postgres_queries_total{container_id=~\"\\\\/k8s.*\",status!=\"ok\"})[$__rate_interval],\n          \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n        ) or label_replace(\n          rate(container_postgres_queries_total{container_id=~\"\\\\/system.slice.*\",status!=\"ok\"})[$__rate_interval],\n          \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n        )\n  ),\n  metric_good = max by (source, actual_destination,target,id) (\n        label_replace(\n          rate(container_postgres_queries_total{container_id=~\"\\\\/k8s.*\",status=\"ok\"})[$__rate_interval],\n          \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n        ) or label_replace(\n          rate(container_postgres_queries_total{container_id=~\"\\\\/system.slice.*\",status=\"ok\"})[$__rate_interval],\n          \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n        )\n  ),  \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service,target,id)(\n    label_join(\n      label_replace(\n          label_copy(\n              coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n              or on (source_pod,actual_destination)\n              coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n              \"source_pod\",\"source\",\"target_pod\",\"target\"\n          ),\n          \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n      ),\n      \"id\",\"+\",\"source\",\"target\"\n    )\n  )\n)\n\nalias(\n  label_set(\n  max by (id,source,target) (\n   label_join(\n      label_copy(\n          (metric_fail * on(source,actual_destination) group_left(target_namespace,target_pod,target_service,target,id) edges_query) \n      ,\"target_pod\",\"target\")\n  ,\"id\",\"+\",\"source\",\"target\"))\n,\"color\",\"red\",\"highlighted\",\"true\")\nor on (id,source,target) \nmax by (id,source,target,color,highlighted) (\n  label_set(\n    max by (id,source,target) (\n      label_join(\n        label_copy( \n          (metric_good * on(source,actual_destination) group_left(target_namespace,target_pod,target_service,target,id) edges_query)\n        ,\"target_pod\",\"target\")\n      ,\"id\",\"+\",\"source\",\"target\")\n    )\n  ,\"color\",\"\",\"highlighted\",\"false\") \n),\"edges\")",
          "format": "table",
          "hide": false,
          "instant": true,
          "legendFormat": "__auto",
          "range": false,
          "refId": "Edges"
        }
      ],
      "title": "Все соединения выбранного объекта (дропы только у кубовых сущностей)",
      "transformations": [
        {
          "id": "merge",
          "options": {}
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "mainStat",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Nodes"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "arc__tcp_errors",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Nodes"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "calculateField",
          "options": {
            "alias": "mainstat",
            "mode": "reduceRow",
            "reduce": {
              "include": [
                "Value #Edges"
              ],
              "reducer": "last"
            }
          }
        },
        {
          "id": "partitionByValues",
          "options": {
            "fields": [
              "__name__"
            ],
            "keepFields": false,
            "naming": {
              "asLabels": false
            }
          }
        },
        {
          "id": "filterFieldsByName",
          "options": {
            "include": {
              "names": [
                "nodes id",
                "nodes subtitle",
                "nodes title",
                "edges id",
                "edges color",
                "edges highlighted",
                "edges source",
                "edges target",
                "edges Value #Edges",
                "nodes Value #Nodes"
              ]
            }
          }
        }
      ],
      "type": "nodeGraph"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 17,
        "x": 7,
        "y": 110
      },
      "id": 29,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination) (\n    label_replace(\n      rate(container_postgres_queries_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_postgres_queries_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_postgres_queries_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_postgres_queries_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Postgres query duration time (показаны $top самых высоких откликов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "semi-dark-red",
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 118
      },
      "id": 35,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      rate(container_postgres_queries_total{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_postgres_queries_total{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} (code:{{status}}) -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Postgresql requests (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "semi-dark-red",
            "mode": "shades"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 125
      },
      "id": 34,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      rate(container_postgres_queries_total{container_id=~\"\\\\/k8s.*\", status!=\"ok\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_postgres_queries_total{container_id=~\"\\\\/k8s.*\", status!=\"ok\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} (code:{{status}}) -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Postgresql FAILED requests (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "s"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 8,
        "w": 17,
        "x": 7,
        "y": 132
      },
      "id": 36,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination) (\n    label_replace(\n      rate(container_kafka_requests_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_kafka_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_kafka_requests_duration_seconds_total_sum{container_id=~\"\\\\/k8s.*\"})/rate(container_kafka_requests_duration_seconds_total_count{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Kafka query duration time (показаны $top самых высоких откликов)",
      "type": "timeseries"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "fixedColor": "semi-dark-red",
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "line",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          },
          "unit": "reqps"
        },
        "overrides": []
      },
      "gridPos": {
        "h": 7,
        "w": 17,
        "x": 7,
        "y": 140
      },
      "id": 37,
      "options": {
        "legend": {
          "calcs": [
            "max",
            "lastNotNull"
          ],
          "displayMode": "table",
          "placement": "right",
          "showLegend": true,
          "sortBy": "Max",
          "sortDesc": true
        },
        "tooltip": {
          "mode": "multi",
          "sort": "desc"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, actual_destination,status) (\n    label_replace(\n      rate(container_kafka_requests_total{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n    ) or label_replace(\n      rate(container_kafka_requests_total{container_id=~\"\\\\/k8s.*\"})[$__rate_interval],\n      \"source\", \"$1\", \"container_id\", \"\\\\/system.slice\\\\/(.+?)$\"\n    )\n  ), \n  edges_query =  group by(source,actual_destination,target_namespace,target_pod,target_service)(\n    label_replace(\n        label_copy(\n            coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n            or on (source_pod,actual_destination)\n            coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"},\n            \"source_pod\",\"source\"\n        ),\n        \"actual_destination\",\"$1\",\"actual_destination\",\"(.+?)\"\n    )\n  )\n)\n\ntopk_max($top,(metric * on(source,actual_destination) group_left(target_namespace,target_pod,target_service) edges_query))",
          "hide": false,
          "instant": false,
          "legendFormat": "{{source}} (code:{{status}}) -> [{{target_namespace}}] {{target_pod}}",
          "range": true,
          "refId": "A"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${DS_VICTORIA-P01-PRODUCTION}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds{container_id=~\"\\\\/k8s\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds{container_id=~\"^\\\\/$namespace\\\\/.+?$\", container_id=~\".+?$service$\"}[$__rate_interval]),\n      \"source\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ),\n  base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\")\n)\n\nWITH (\n  combined_metric = metric\n  * on(destination_ip) group_left(namespace, service) (\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        label_join(\n          label_replace(\n            label_replace(\n              label_replace(\n                container_net_tcp_listen_info,\n                \"namespace\", \"[$1]\", \"container_id\", \"\\\\/.+?\\\\/(.+?)\\\\/.*\"\n              ),\n              \"service\", \"$1\", \"container_id\", \".*\\\\/(.+?)$\"\n            ),\n            \"destination_ip\", \"$1\", \"listen_addr\", \"(.+?):.*\"\n          ),\n          \"namespace\", \" \", \"namespace\", \"service\"\n        ),\n        \"listen_addr\", \"service\"\n      )\n    )\n    or on(destination_ip)\n    group by (destination_ip, namespace, service) (\n      label_copy(\n        group by (domain) (\n          container_dns_requests_total{container_id=~\".+?$namespace\\\\/.+?$\", container_id=~\".+?\\\\/$service$\"}\n        ) * on(domain) group_left(ip)\n        group by (domain, ip) (\n          label_copy(ip_to_fqdn, \"fqdn\", \"domain\")\n        ),\n        \"domain\", \"service\", \"ip\", \"destination_ip\", \"ip\", \"namespace\"\n      )\n    )\n  )\n)\n\ncombined_metric\n",
          "hide": true,
          "instant": false,
          "legendFormat": "{{source}} -> {{destination_ip}} {{namespace}} {{service}}",
          "range": true,
          "refId": "B"
        },
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH (\n  metric = max by (source, destination_ip) (\n    label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \".+\\\\/(.+?)\\\\/$service$\"\n    ) or label_replace(\n      increase(container_net_latency_seconds[$__rate_interval]),\n      \"id\", \"$1\", \"container_id\", \"\\\\/$namespace\\\\/($service)$\"\n    )\n  ), \n  edges_query =  group by(source,destination_ip,target_namespace,target_pod,target_service)(\n            label_copy(\n                coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\"} \n                or\n                coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\"},\n                \"source_pod\",\"source\",\"actual_destination\",\"destination_ip\"\n            )\n    )\n\n  \n)\n\ntopk(10,metric)\n# * on(source,destination_ip) group_left(target_namespace,target_pod,target_service) edges_query",
          "hide": true,
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "C"
        }
      ],
      "title": "Kafka requests (показаны $top самых частых запросов)",
      "type": "timeseries"
    },
    {
      "collapsed": false,
      "gridPos": {
        "h": 1,
        "w": 24,
        "x": 0,
        "y": 159
      },
      "id": 25,
      "panels": [],
      "title": "Logs",
      "type": "row"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "gridPos": {
        "h": 12,
        "w": 11,
        "x": 0,
        "y": 160
      },
      "id": 23,
      "options": {
        "dedupStrategy": "none",
        "enableLogDetails": true,
        "prettifyLogMessage": false,
        "showCommonLabels": false,
        "showLabels": false,
        "showTime": true,
        "sortOrder": "Descending",
        "wrapLogMessage": true
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH( \n    base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\") )\n\nalias(base_query * on(id) group_right(title,subtitle,__name__) \n    sum by (id,sample,level,pattern_hash) (\n      label_replace(\n        increase(\n          sum by (sample,level,pattern_hash,container_id) (rate(container_log_messages_total{container_id=~\"\\\\/k8s.*\", sample!=\"\"})) >0[1m]\n        )\n        ,\"id\",\"$1\",\"container_id\",\"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      )\n    ) \n  ,\"nodes\")\n",
          "format": "table",
          "instant": false,
          "legendFormat": "__auto",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Logs",
      "transformations": [
        {
          "id": "organize",
          "options": {
            "excludeByName": {},
            "includeByName": {},
            "indexByName": {
              "Time": 1,
              "Value": 4,
              "level": 2,
              "pattern_hash": 3,
              "sample": 0
            },
            "renameByName": {}
          }
        }
      ],
      "type": "logs"
    },
    {
      "datasource": {
        "type": "prometheus",
        "uid": "${DS_VICTORIA-P01-PRODUCTION}"
      },
      "fieldConfig": {
        "defaults": {
          "color": {
            "mode": "palette-classic"
          },
          "custom": {
            "axisBorderShow": false,
            "axisCenteredZero": false,
            "axisColorMode": "text",
            "axisLabel": "",
            "axisPlacement": "auto",
            "barAlignment": 0,
            "barWidthFactor": 0.6,
            "drawStyle": "bars",
            "fillOpacity": 0,
            "gradientMode": "none",
            "hideFrom": {
              "legend": false,
              "tooltip": false,
              "viz": false
            },
            "insertNulls": false,
            "lineInterpolation": "linear",
            "lineWidth": 1,
            "pointSize": 5,
            "scaleDistribution": {
              "type": "linear"
            },
            "showPoints": "auto",
            "spanNulls": false,
            "stacking": {
              "group": "A",
              "mode": "none"
            },
            "thresholdsStyle": {
              "mode": "off"
            }
          },
          "mappings": [],
          "thresholds": {
            "mode": "absolute",
            "steps": [
              {
                "color": "green"
              },
              {
                "color": "red",
                "value": 80
              }
            ]
          }
        },
        "overrides": []
      },
      "gridPos": {
        "h": 12,
        "w": 13,
        "x": 11,
        "y": 160
      },
      "id": 24,
      "options": {
        "legend": {
          "calcs": [
            "sum"
          ],
          "displayMode": "table",
          "placement": "bottom",
          "showLegend": true,
          "sortBy": "Total",
          "sortDesc": false
        },
        "tooltip": {
          "mode": "single",
          "sort": "none"
        }
      },
      "pluginVersion": "11.4.0",
      "targets": [
        {
          "datasource": {
            "type": "prometheus",
            "uid": "${Datasource}"
          },
          "editorMode": "code",
          "expr": "WITH( \n    base_query = alias(\n    union(\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n        ),\n        (\n        group by (id,title,subtitle) (\n            label_join(\n                label_copy(\n                    coroot:success_connections{source_namespace=~\"$namespace\", source_service=~\"$service\", target_namespace!~\"$excl_namespace\"}\n                    , \"target_pod\",\"id\", \"target_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"target_namespace\",\"target_service\")\n                or \n            label_join(\n                label_copy(\n                    coroot:success_connections{target_namespace=~\"$namespace\", target_service=~\"$service\", source_namespace!~\"$excl_namespace\"}\n                    , \"source_pod\",\"id\", \"source_pod\",\"title\"\n                ),\n            \"subtitle\",\" \", \"source_namespace\",\"source_service\")\n            )\n        )\n    )\n,\"nodes\") )\n\n\ntopk_max($top,alias(base_query * on(id) group_right(title,subtitle,__name__) \n    sum by (id,sample,level,pattern_hash) (\n      label_replace(\n        increase(\n          sum by (sample,level,pattern_hash,container_id) (increase(container_log_messages_total{container_id=~\"\\\\/k8s.*\", sample!=\"\"})) >0[15s]\n        )\n        ,\"id\",\"$1\",\"container_id\",\"\\\\/k.+?\\\\/.*\\\\/(.+?)\\\\/.*\"\n      )\n    ) \n  ,\"nodes\"))\n",
          "format": "time_series",
          "instant": false,
          "legendFormat": "{{id}} ({{title}} {{subtitle}}) [{{level}}]: -----> {{sample}} ",
          "range": true,
          "refId": "A"
        }
      ],
      "title": "Logs (показаны $top самых частотных логов)",
      "type": "timeseries"
    }
  ],
  "refresh": "",
  "schemaVersion": 40,
  "tags": [],
  "templating": {
    "list": [
      {
        "current": {},
        "includeAll": false,
        "name": "Datasource",
        "options": [],
        "query": "prometheus",
        "refresh": 1,
        "regex": "",
        "type": "datasource"
      },
      {
        "allValue": ".*",
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_VICTORIA-P01-PRODUCTION}"
        },
        "definition": "query_result(group by (container_id,namespace,service) (label_replace(label_replace(label_set(container_restarts_total{container_id!=\"\"},\"namespace\",\"system.slice\"),\"namespace\",\"$1\",\"container_id\",\"\\\\/.+?\\\\/(.+?)\\\\/.*\"),\"service\",\"$1\",\"container_id\",\".*\\\\/(.+?)$\")))",
        "includeAll": false,
        "multi": true,
        "name": "namespace",
        "options": [],
        "query": {
          "qryType": 3,
          "query": "query_result(group by (container_id,namespace,service) (label_replace(label_replace(label_set(container_restarts_total{container_id!=\"\"},\"namespace\",\"system.slice\"),\"namespace\",\"$1\",\"container_id\",\"\\\\/.+?\\\\/(.+?)\\\\/.*\"),\"service\",\"$1\",\"container_id\",\".*\\\\/(.+?)$\")))",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "/namespace=\"(.+?)\"/",
        "type": "query"
      },
      {
        "allValue": ".*",
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${Datasource}"
        },
        "definition": "query_result(group by (container_id) (container_restarts_total{container_id=~\".+?${namespace}\\\\/.+?$\"}))",
        "includeAll": true,
        "multi": true,
        "name": "service",
        "options": [],
        "query": {
          "qryType": 3,
          "query": "query_result(group by (container_id) (container_restarts_total{container_id=~\".+?${namespace}\\\\/.+?$\"}))",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "/.+?container_id=\".*\\/(.+?)\"/",
        "type": "query"
      },
      {
        "allValue": ".*",
        "current": {},
        "datasource": {
          "type": "prometheus",
          "uid": "${DS_VICTORIA-P01-PRODUCTION}"
        },
        "definition": "query_result(group by (container_id,namespace,service) (label_replace(label_replace(label_set(container_restarts_total{container_id!=\"\"},\"namespace\",\"system.slice\"),\"namespace\",\"$1\",\"container_id\",\"\\\\/.+?\\\\/(.+?)\\\\/.*\"),\"service\",\"$1\",\"container_id\",\".*\\\\/(.+?)$\")))",
        "includeAll": false,
        "multi": true,
        "name": "excl_namespace",
        "options": [],
        "query": {
          "qryType": 3,
          "query": "query_result(group by (container_id,namespace,service) (label_replace(label_replace(label_set(container_restarts_total{container_id!=\"\"},\"namespace\",\"system.slice\"),\"namespace\",\"$1\",\"container_id\",\"\\\\/.+?\\\\/(.+?)\\\\/.*\"),\"service\",\"$1\",\"container_id\",\".*\\\\/(.+?)$\")))",
          "refId": "PrometheusVariableQueryEditor-VariableQuery"
        },
        "refresh": 2,
        "regex": "/namespace=\"(.+?)\"/",
        "type": "query"
      },
      {
        "current": {
          "text": "50",
          "value": "50"
        },
        "description": "value of top problem of each panel",
        "label": "Лимит результатов на панелях (дефолт 50)",
        "name": "top",
        "options": [
          {
            "selected": true,
            "text": "50",
            "value": "50"
          }
        ],
        "query": "50",
        "type": "textbox"
      }
    ]
  },
  "time": {
    "from": "now-5m",
    "to": "now"
  },
  "timepicker": {},
  "timezone": "",
  "title": "Coroot namespace",
  "uid": "fbf5b9d8-b564-4636-86c8-8da5f2ef8bb1",
  "version": 210,
  "weekStart": ""
}